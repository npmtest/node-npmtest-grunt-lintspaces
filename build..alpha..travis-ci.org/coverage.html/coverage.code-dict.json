{"/home/travis/build/npmtest/node-npmtest-grunt-lintspaces/test.js":"/* istanbul instrument in package npmtest_grunt_lintspaces */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-lintspaces/lib.npmtest_grunt_lintspaces.js":"/* istanbul instrument in package npmtest_grunt_lintspaces */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_lintspaces = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_lintspaces = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-lintspaces/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-lintspaces && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_lintspaces */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_lintspaces\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_lintspaces.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_lintspaces.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_lintspaces.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_lintspaces.__dirname + '/lib.npmtest_grunt_lintspaces.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-lintspaces/node_modules/grunt-lintspaces/Gruntfile.js":"module.exports = function(grunt) {\n\t// project configuration\n\tgrunt.initConfig({\n\t\tpkg: grunt.file.readJSON('package.json'),\n\n\t\tjshint: {\n\t\t\tall: [\n\t\t\t\t'Gruntfile.js',\n\t\t\t\t'tasks/**/*.js',\n\t\t\t\t'tests/*.js'\n\t\t\t],\n\t\t\toptions: {\n\t\t\t\tjshintrc: '.jshintrc'\n\t\t\t}\n\t\t},\n\n\t\tjscs: {\n\t\t\tall: [\n\t\t\t\t'Gruntfile.js',\n\t\t\t\t'tasks/**/*.js',\n\t\t\t\t'tests/*.js'\n\t\t\t]\n\t\t},\n\n\t\tnodeunit: {\n\t\t\tall: [\n\t\t\t\t'tests/test_*.js'\n\t\t\t]\n\t\t},\n\n\t\tconcat: {\n\t\t\treadme: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'docs/intro.md',\n\t\t\t\t\t'docs/issues.md',\n\t\t\t\t\t'docs/installation.md',\n\t\t\t\t\t'docs/parameters.md',\n\t\t\t\t\t'node_modules/lintspaces/docs/options.md',\n\t\t\t\t\t'docs/task-options.md',\n\t\t\t\t\t'docs/examples.md',\n\t\t\t\t\t'docs/contribution.md',\n\t\t\t\t\t'docs/license.md'\n\t\t\t\t],\n\t\t\t\tdest: 'README.md'\n\t\t\t}\n\t\t},\n\n\t\tlintspaces: {\n\t\t\tself: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'Gruntfile.js',\n\t\t\t\t\t'tasks/**/*.js',\n\t\t\t\t\t'tests/*.js',\n\t\t\t\t\t'docs/*.md'\n\t\t\t\t],\n\t\t\t\toptions: {\n\t\t\t\t\tnewline: true,\n\t\t\t\t\ttrailingspaces: true,\n\t\t\t\t\tindentation: 'tabs',\n\t\t\t\t\tignores: ['js-comments'],\n\n\t\t\t\t\t// Own options:\n\t\t\t\t\tshowValid: true,\n\t\t\t\t\tshowTypes: true,\n\t\t\t\t\tshowCodes: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tnewline_okay: {\n\t\t\t\tsrc: ['tests/files/newline_okay.txt'],\n\t\t\t\toptions: {\n\t\t\t\t\tnewline: true,\n\t\t\t\t\tnewlineBlocks: 2\n\t\t\t\t}\n\t\t\t},\n\t\t\tnewline_missing: {\n\t\t\t\tsrc: ['tests/files/newline_missing.txt'],\n\t\t\t\toptions: {\n\t\t\t\t\tnewline: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tnewlines_toomuch: {\n\t\t\t\tsrc: ['tests/files/newline_toomuch.txt'],\n\t\t\t\toptions: {\n\t\t\t\t\tnewline: true,\n\t\t\t\t\tnewlineMaximum: 2\n\t\t\t\t}\n\t\t\t},\n\t\t\tnewlines_amount_invalid: {\n\t\t\t\tsrc: ['tests/files/newline_toomuch.txt'],\n\t\t\t\toptions: {\n\t\t\t\t\tnewlineMaximum: 0\n\t\t\t\t}\n\t\t\t},\n\t\t\ttrailingspaces: {\n\t\t\t\tsrc: ['tests/files/trailingspaces.txt'],\n\t\t\t\toptions: {\n\t\t\t\t\ttrailingspaces: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tindentation_tabs: {\n\t\t\t\tsrc: ['tests/files/indentation_tabs.txt'],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'tabs'\n\t\t\t\t}\n\t\t\t},\n\t\t\tindentation_spaces: {\n\t\t\t\tsrc: ['tests/files/indentation_spaces.txt'],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'spaces'\n\t\t\t\t}\n\t\t\t},\n\t\t\tindentation_spaces_3: {\n\t\t\t\tsrc: ['tests/files/indentation_spaces.txt'],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'spaces',\n\t\t\t\t\tspaces: 3\n\t\t\t\t}\n\t\t\t},\n\t\t\tcomments_pattern: {\n\t\t\t\tsrc: ['tests/files/comments/comments.js'],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'tabs',\n\t\t\t\t\tignores: [\n\t\t\t\t\t\t/'''[\\s\\S]*?'''/g, //Python\n\t\t\t\t\t\t/\\/\\*[\\s\\S]*?\\*\\//g //C, JavaScript, Java, AS3 etc.\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\tcomments_buildin_js: {\n\t\t\t\tsrc: ['tests/files/comments/comments.js'],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'tabs',\n\t\t\t\t\tignores: ['js-comments']\n\t\t\t\t}\n\t\t\t},\n\t\t\tcomments_buildin_py: {\n\t\t\t\tsrc: ['tests/files/comments/comments.py'],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'spaces',\n\t\t\t\t\tspaces: 4,\n\t\t\t\t\tignores: ['python-comments']\n\t\t\t\t}\n\t\t\t},\n\t\t\tcomments_buildin_xml: {\n\t\t\t\tsrc: ['tests/files/comments/comments.xml'],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'tabs',\n\t\t\t\t\tignores: ['xml-comments']\n\t\t\t\t}\n\t\t\t},\n\t\t\tcomments_nomatches: {\n\t\t\t\tsrc: ['tests/files/comments/comments.nomatches'],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'tabs',\n\t\t\t\t\tignores: [\n\t\t\t\t\t\t'js-comments',\n\t\t\t\t\t\t'html-comments'\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectory: {\n\t\t\t\tsrc: ['tests/files'],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'tabs'\n\t\t\t\t}\n\t\t\t},\n\t\t\teditorconfig: {\n\t\t\t\tsrc: ['tests/files/comments/comments.js'],\n\t\t\t\toptions: {\n\t\t\t\t\tignores: ['js-comments'],\n\t\t\t\t\teditorconfig: 'tests/files/.editorconfig'\n\t\t\t\t}\n\t\t\t},\n\t\t\teditorconfig_notfound: {\n\t\t\t\tsrc: ['tests/files/comments/comments.js'],\n\t\t\t\toptions: {\n\t\t\t\t\tignores: ['js-comments'],\n\t\t\t\t\teditorconfig: 'path-doesnt-existis/.editorconfig'\n\t\t\t\t}\n\t\t\t},\n\t\t\tjunit_inactive: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'tests/files/indentation_tabs.txt',\n\t\t\t\t\t'tests/files/indentation_spaces.txt'\n\t\t\t\t],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'tabs'\n\t\t\t\t}\n\t\t\t},\n\t\t\tjunit_active: {\n\t\t\t\tsrc: [\n\t\t\t\t\t'tests/files/indentation_tabs.txt',\n\t\t\t\t\t'tests/files/indentation_spaces.txt'\n\t\t\t\t],\n\t\t\t\toptions: {\n\t\t\t\t\tindentation: 'tabs',\n\t\t\t\t\tjunit: 'tests/temp/junit.xml'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// load tasks\n\tgrunt.loadTasks('tasks');\n\tgrunt.loadNpmTasks('grunt-contrib-jshint');\n\tgrunt.loadNpmTasks('grunt-contrib-nodeunit');\n\tgrunt.loadNpmTasks('grunt-contrib-concat');\n\tgrunt.loadNpmTasks('grunt-jscs');\n\n\t// define tasks\n\tgrunt.registerTask('test', [\n\t\t'nodeunit:all'\n\t]);\n\n\tgrunt.registerTask('validate', [\n\t\t'jshint:all',\n\t\t'jscs:all',\n\t\t'lintspaces:self'\n\t]);\n\n\tgrunt.registerTask('build', [\n\t\t'concat:readme'\n\t]);\n\n\tgrunt.registerTask('default', [\n\t\t'validate',\n\t\t'test',\n\t\t'build'\n\t]);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-lintspaces/node_modules/grunt-lintspaces/tasks/lintspaces.js":"var\n\tValidator = require('lintspaces'),\n\tJUnitWriter = require('junitwriter'),\n\n\tLINTING_PASSED = '{a} lint free.',\n\tLINTING_FAILED = 'Formatting check failed.',\n\n\tDEFAULTS = {\n\t\tshowCodes: false,\n\t\tshowTypes: false,\n\t\tshowValid: false,\n\t\tjunit: false\n\t}\n;\n\nmodule.exports = function(grunt) {\n\n\tfunction hasMessages(report) {\n\t\treturn Object.keys(report).length !== 0;\n\t}\n\n\tfunction reportMessages(report, options) {\n\t\tvar hasWarnings = false;\n\n\t\tObject.keys(report).forEach(function(line) {\n\t\t\treport[line].forEach(function(item) {\n\t\t\t\tvar message = '  L' + item.line + ': ';\n\t\t\t\tmessage += options.showTypes ? '(' + item.type + ') ' : '';\n\t\t\t\tmessage += item.message[item.type === 'warning' ? 'red' : 'yellow'];\n\t\t\t\tmessage += options.showCodes ? ' [' + item.code + ']' : '';\n\t\t\t\tgrunt.log.writeln(message);\n\n\t\t\t\thasWarnings = hasWarnings || item.type === 'warning';\n\t\t\t});\n\t\t});\n\n\t\treturn hasWarnings;\n\t}\n\n\tfunction reportJunit(report, path, junitwriter) {\n\t\tif (junitwriter) {\n\t\t\tvar\n\t\t\t\tsuite = junitwriter.addTestsuite(path),\n\t\t\t\ttestcase = suite.addTestcase(path, 'grunt.lintspaces')\n\t\t\t;\n\n\t\t\tObject.keys(report).forEach(function(line) {\n\t\t\t\treport[line].forEach(function(item) {\n\t\t\t\t\ttestcase.addFailure(item.message + ' at line ' + line, item.type);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction complete(hasWarnings, validator) {\n\t\tif (hasWarnings) {\n\t\t\tgrunt.log.writeln();\n\t\t\tgrunt.fail.warn(LINTING_FAILED);\n\t\t} else {\n\t\t\tgrunt.log.ok(LINTING_PASSED.replace('{a}', validator.getProcessedFiles()));\n\t\t}\n\t}\n\n\tgrunt.registerMultiTask('lintspaces', 'Checking spaces', function() {\n\t\tvar\n\t\t\tdone = this.async(),\n\t\t\toptions = this.options(DEFAULTS),\n\t\t\tvalidator = new Validator(options),\n\t\t\thasWarnings = false,\n\t\t\tjunitwriter,\n\t\t\twarnings,\n\t\t\treport\n\t\t;\n\n\t\t// Create JunitWirter instance\n\t\tif (typeof options.junit === 'string') {\n\t\t\tjunitwriter = new JUnitWriter();\n\t\t}\n\n\t\t// Validate all files:\n\t\tthis.files.forEach(function(file) {\n\t\t\tfile.src.forEach(function(path) {\n\t\t\t\tif (grunt.file.isFile(path)) {\n\t\t\t\t\tvalidator.validate(path);\n\t\t\t\t\treport = validator.getInvalidLines(path);\n\n\t\t\t\t\t// Is file valid? Messages in report?\n\t\t\t\t\tif (hasMessages(report)) {\n\t\t\t\t\t\t// ... log reports messages:\n\t\t\t\t\t\tgrunt.log.writeln(String.fromCharCode(0x2613).red + ' ' + path.red);\n\n\t\t\t\t\t\twarnings = reportMessages(report, options);\n\t\t\t\t\t\thasWarnings = hasWarnings || warnings;\n\n\t\t\t\t\t} else if (options.showValid) {\n\t\t\t\t\t\t// ... file is valid:\n\t\t\t\t\t\tgrunt.log.writeln(String.fromCharCode(0x2714).green + ' ' + path);\n\t\t\t\t\t}\n\n\t\t\t\t\treportJunit(report, path, junitwriter);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tif (junitwriter) {\n\t\t\t// Save Junit output into file:\n\t\t\tjunitwriter.save(options.junit, function() {\n\t\t\t\tcomplete(hasWarnings, validator);\n\t\t\t\tdone();\n\t\t\t});\n\t\t} else {\n\t\t\tcomplete(hasWarnings, validator);\n\t\t\tdone();\n\t\t}\n\n\t});\n};\n"}